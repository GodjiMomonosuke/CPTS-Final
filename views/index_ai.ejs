<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chatbot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f7f7f8;
    }

    #chat-container {
      width: 100%;
      max-width: 800px;
      height: 80vh;
      display: flex;
      flex-direction: column;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    #chat-history {
      flex-grow: 1;
      padding: 20px;
      overflow-y: auto;
      background-color: #27292b2b;
      border-bottom: 1px solid #ccc;
    }

    .message {
      display: flex;
      margin-bottom: 10px;
    }

    .user-message {
      justify-content: flex-end;
      text-align:right;
      background-color: #007bff;
      color: white;
      padding: 10px 15px;
      border-radius: 15px;
      align-self: flex-end;
    }

    .bot-message {
      justify-content: flex-start;
      text-align: left;
      background-color: #f1f0f0;
      color: black;
      padding: 10px 15px;
      border-radius: 15px;
      align-self: flex-start;
      display: inline-block;
      word-wrap: break-word;
      margin-bottom: 10px;
    }

    .bot-message pre {
      background-color: #f4f4f4;
      padding: 10px;
      border-radius: 5px;
      white-space: pre-wrap;
      word-wrap: break-word;
      overflow-x: auto;
      position: relative;
    }

    .copy-icon {
      position: absolute;
      top: 5px;
      right: 10px;
      cursor: pointer;
      font-size: 14px;
      border: none;
      background-color: transparent;
      color: #007bff;
    }

    .copy-icon:hover {
      color: #0056b3;
    }

    #chat-form {
      display: flex;
      padding: 10px;
      border-top: 1px solid #ccc;
      background-color: white;
    }

    input {
      flex-grow: 1;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 25px;
      margin-right: 10px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 25px;
      font-size: 16px;
      cursor: pointer;
    }

    button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }

    #loader {
      display: none;
      text-align: center;
      margin-top: 20px;
    }

    #quick-messages {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-bottom: 10px;
      padding: 10px;
    }

    .quick-message-btn {
      padding: 5px 10px;
      background-color: #f30909;
      border: 1px solid #ccc;
      border-radius: 15px;
      cursor: pointer;
    }

    .quick-message-btn:hover {
      background-color: #e0e0e0;
    }
  </style>
</head>
<body>
  <!-- Narbar-->
  <%- include('../views/navbar') %>
  <!-- Chat container -->
  <div id="chat-container">
    <!-- Chat history -->
    <div id="chat-history"></div>

    <!-- Loader -->
    <div id="loader">
      <img src="/images/loader.gif" alt="Loading..." width="50px">
    </div>

    <!-- Quick message buttons -->
    <div id="quick-messages">
      <button class="quick-message-btn">สวัสดี</button>
      <button class="quick-message-btn">ขอความช่วยเหลือ</button>
      <button class="quick-message-btn">ขอบคุณ</button>
    </div>

    <!-- Chat form -->
    <form id="chat-form">
      <input type="text" id="user-input" placeholder="Enter your message..." autocomplete="off">
      <button type="submit">Send</button>
    </form>
  </div>
  <script>
    const chatHistory = document.getElementById('chat-history');
    const userInput = document.getElementById('user-input');
    const form = document.getElementById('chat-form');
    const loader = document.getElementById('loader');
    const quickMessageButtons = document.querySelectorAll('.quick-message-btn');

    // Function to add message to chat history
    function addMessage(message, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.classList.add('message', isUser ? 'user-message' : 'bot-message');

      // Check if message is code block
      if (!isUser && message.includes('```')) {
        const codeMessage = message.replace(/```/g, ''); // Remove the triple backticks
        messageDiv.innerHTML = `
          <pre><code>${codeMessage}</code><button class="copy-icon" onclick="copyCode(this)">Copy</button></pre>
        `;
      } else {
        messageDiv.textContent = message;
      }

      chatHistory.appendChild(messageDiv);
      chatHistory.scrollTop = chatHistory.scrollHeight; // Scroll to the bottom
    }

    // Function to handle message sending
    async function sendMessage() {
      const userMessage = userInput.value;
      userInput.value = ''; // Clear input field
      addMessage(userMessage, true); // Add user message

      try {
        loader.style.display = 'block'; // Show loader

        const response = await fetch('/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userInput: userMessage }),
        });

        const data = await response.json();
        const botMessage = data.response;
        addMessage(botMessage, false); // Add bot message
      } catch (error) {
        console.error('Error:', error);
        addMessage('Error occurred. Please try again.', false);
      } finally {
        loader.style.display = 'none'; // Hide loader
      }
    }

    // Handle form submission
    form.addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent form from refreshing the page
      if (userInput.value.trim() !== '') {
        sendMessage();
      }
    });

    // Function to copy code
    function copyCode(button) {
      const codeElement = button.previousElementSibling;
      const codeText = codeElement.textContent;

      // Create a temporary textarea element to hold the text
      const tempTextArea = document.createElement('textarea');
      tempTextArea.value = codeText;
      document.body.appendChild(tempTextArea);

      // Select and copy the text
      tempTextArea.select();
      document.execCommand('copy');

      // Remove the temporary textarea
      document.body.removeChild(tempTextArea);

      // Update button text
      button.textContent = 'Copied!';
      setTimeout(() => {
        button.textContent = 'Copy';
      }, 2000); // Change back to Copy after 2 seconds
    }

    // Function to handle quick message button clicks
    function handleQuickMessage(event) {
      const message = event.target.textContent;
      userInput.value = message;
      sendMessage();
    }

    // Add click event listeners to quick message buttons
    quickMessageButtons.forEach(button => {
      button.addEventListener('click', handleQuickMessage);
    });
  </script>
</body>
</html>